- name: setup local configuration and scratch information
  hosts: localhost
  gather_facts: false

  tasks:
  - name: create cert output folder
    ansible.builtin.file:
      path: '{{ playbook_dir }}/cert_setup'
      state: directory

  - name: create generate_cert script
    ansible.builtin.template:
      src: generate_cert.sh.j2
      dest: '{{ playbook_dir }}/cert_setup/generate_cert.sh'
      mode: '700'

  - name: generate CA and LDAPS certificates
    ansible.builtin.shell: ./generate_cert.sh password
    args:
      creates: '{{ playbook_dir }}/cert_setup/complete.txt'
      chdir: '{{ playbook_dir }}/cert_setup'

- name: setup common Windows information
  hosts: windows
  gather_facts: false

  tasks:
  - name: get network connection names
    ansible.windows.win_powershell:
      script: |
        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        Get-CimInstance -ClassName Win32_NetworkAdapter -Filter "Netenabled='True'" | ForEach-Object -Process {
          $config = Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration -Filter "Index='$($_.Index)'"
          if ($config.IPAddress -contains '{{ ansible_host }}') {
            $_.NetConnectionID
          }
        }
    register: raw_connection_name

  - set_fact:
      public_connection_name: '{{ raw_connection_name.output[0] }}'

  - name: copy CA certificate
    ansible.windows.win_copy:
      src: '{{ playbook_dir }}/cert_setup/ca.pem'
      dest: C:\Windows\TEMP\ca.pem

  - name: import CA certificate to trusted root CA
    ansible.windows.win_certificate_store:
      path: C:\Windows\TEMP\ca.pem
      state: present
      store_location: LocalMachine
      store_name: Root

- name: create root domain controller
  hosts: DC01
  gather_facts: false

  tasks:
  - name: set the DNS for the internal adapters to localhost
    ansible.windows.win_dns_client:
      adapter_names:
      - '{{ public_connection_name }}'
      dns_servers:
      - 127.0.0.1

  - name: ensure domain exists and DC is promoted as a domain controller
    microsoft.ad.domain:
      dns_domain_name: '{{ domain_name }}'
      safe_mode_password: '{{ domain_password }}'
      reboot: true

  - name: install Active Directory Certificate Services
    ansible.windows.win_feature:
      name: AD-Certificate
      state: present
    register: adcs_setup_res

  - name: reboot after ADCS install
    ansible.windows.win_reboot:
    when: adcs_setup_res.reboot_required

  - name: configure ADCS certification authority
    ansible.windows.win_powershell:
      script: |
        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        $caParams = @{
            CAType             = 'EnterpriseRootCa'
            CryptoProviderName = 'RSA#Microsoft Software Key Storage Provider'
            KeyLength          = 2048
            HashAlgorithmName  = 'SHA256'
            Force              = $true
        }
        try {
            Install-AdcsCertificationAuthority @caParams
            $Ansible.Changed = $true
        }
        catch [Microsoft.CertificateServices.Deployment.Common.CertificateServicesBaseSetupException] {
            if ($_.Exception.Message -like 'The Certification Authority is already installed.*') {
                return
            }
            throw
        }

    become: true
    become_method: runas
    become_user: SYSTEM

  - name: add custom CA to Forest NTAuthStore
    ansible.windows.win_powershell:
      script: |
        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        $caCert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new('C:\Windows\TEMP\ca.pem')
        $configRoot = (Get-ADRootDSE).configurationNamingContext

        $dn = "CN=NTAuthCertificates,CN=Public Key Services,CN=Services,$configRoot"
        $obj = Get-ADObject -Identity $dn -Properties cACertificate

        $found = $false
        foreach ($certBytes in $obj.cACertificate) {
            $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($certBytes)
            if ($cert.Thumbprint -eq $caCert.Thumbprint) {
                $found = $true
                break
            }
        }

        if (-not $found) {
            certutil.exe -dspublish C:\Windows\TEMP\ca.pem NTAuthCA
            $Ansible.Changed = $true
        }

    become: true
    become_method: runas
    become_user: SYSTEM

  - name: create domain username
    microsoft.ad.user:
      name: '{{ domain_username }}'
      upn: '{{ domain_user_upn }}'
      description: '{{ domain_username }} Domain Account'
      password: '{{ domain_password }}'
      password_never_expires: true
      update_password: when_changed
      groups:
        set:
        - Domain Admins
        - Domain Users
        - Enterprise Admins
      state: present

  - name: request User certificate
    ansible.windows.win_powershell:
      parameters:
        Path: C:\Windows\TEMP\user-{{ domain_username }}.pfx
        CertPass: '{{ domain_password }}'
      script: |
        [CmdletBinding()]
        param (
            [string]
            $Path,

            [string]
            $CertPass
        )
        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        if (Test-Path -LiteralPath $Path) {
            return
        }

        Push-Location Cert:\CurrentUser\My
        $result = Get-Certificate -Template User -Url ldap:
        Pop-Location

        if ($result.Status -ne "Issued") {
            throw "Failed to request User certificate: $($result.Status)"
        }
        $Ansible.Changed = $true

        $cert = $result.Certificate
        $certBytes = $result.Certificate.Export("Pfx", $CertPass)
        [System.IO.File]::WriteAllBytes($Path, $certBytes)

    become: true
    become_method: runas
    vars:
      ansible_become_user: '{{ domain_user_upn }}'
      ansible_become_pass: '{{ domain_password }}'

  - name: fetch certificate for user cert authentication
    ansible.builtin.fetch:
      src: C:\Windows\TEMP\user-{{ domain_username }}.pfx
      dest: '{{ playbook_dir }}/cert_setup/user-{{ domain_username }}.pfx'
      flat: true

  - name: copy LDAPS certificate
    ansible.windows.win_copy:
      src: '{{ playbook_dir }}/cert_setup/dc01.pfx'
      dest: C:\Windows\TEMP\ldaps.pfx

  - name: import LDAPS certificate
    ansible.windows.win_certificate_store:
      path: C:\Windows\TEMP\ldaps.pfx
      password: password
      key_exportable: false
      key_storage: machine
      state: present
      store_type: service
      store_location: NTDS
      store_name: My
    register: ldaps_cert_info

  - name: register LDAPS certificate
    ansible.windows.win_powershell:
      script: |
        $ErrorActionPreference = 'Stop'

        $dse = [adsi]'LDAP://localhost/rootDSE'
        [void]$dse.Properties['renewServerCertificate'].Add(1)
        $dse.CommitChanges()
    when: ldaps_cert_info is changed
    vars:
      ansible_become: true
      ansible_become_method: runas
      ansible_become_user: '{{ domain_user_upn }}'
      ansible_become_pass: '{{ domain_password }}'

- name: create sub domains
  hosts: DC02,DC03
  gather_facts: false

  tasks:
  - name: set DNS for the private adapter to point to the root domain
    ansible.windows.win_dns_client:
      adapter_names:
      - '{{ public_connection_name }}'
      dns_servers:
      - '{{ hostvars["DC01"]["ansible_host"] }}'

  - name: ensure domain creation feature is installed
    ansible.windows.win_feature:
      name:
      - AD-Domain-Services
      - RSAT-ADDS
      state: present
    register: domain_feature_install

  - name: reboot if required by feature install
    ansible.windows.win_reboot:
    when: domain_feature_install.reboot_required

  - name: create sub domain
    win_domain_child:
      dns_domain_name: '{{ domain_name_prefix }}{{ domain_name }}'
      domain_admin_username: '{{ domain_user_upn }}'
      domain_admin_password: '{{ domain_password }}'
      safe_mode_password: '{{ domain_password }}'
    register: domain_create

  - name: reboot after creating sub domain
    ansible.windows.win_reboot:
    when: domain_create.reboot_required

  - name: copy LDAPS certificate
    ansible.windows.win_copy:
      src: '{{ playbook_dir }}/cert_setup/{{ inventory_hostname | lower }}.pfx'
      dest: C:\Windows\TEMP\ldaps.pfx

  - name: import LDAPS certificate
    ansible.windows.win_certificate_store:
      path: C:\Windows\TEMP\ldaps.pfx
      password: password
      key_exportable: false
      key_storage: machine
      state: present
      store_type: service
      store_location: NTDS
      store_name: My
    register: ldaps_cert_info

  - name: register LDAPS certificate
    ansible.windows.win_powershell:
      script: |
        $ErrorActionPreference = 'Stop'

        $dse = [adsi]'LDAP://localhost/rootDSE'
        [void]$dse.Properties['renewServerCertificate'].Add(1)
        $dse.CommitChanges()
    when: ldaps_cert_info is changed
    vars:
      ansible_become: true
      ansible_become_method: runas
      ansible_become_user: '{{ domain_user_upn }}'
      ansible_become_pass: '{{ domain_password }}'

- name: join Windows host to domain
  hosts: APP01
  gather_facts: false

  tasks:
  - name: set the DNS for the private adapter to point to the DC
    ansible.windows.win_dns_client:
      adapter_names:
      - '{{ public_connection_name }}'
      dns_servers:
      - '{{ hostvars["DC01"]["ansible_host"] }}'

  - name: join host to domain
    microsoft.ad.membership:
      dns_domain_name: foo.{{ domain_name }}
      domain_admin_user: '{{ domain_user_upn }}'
      domain_admin_password: '{{ domain_password }}'
      state: domain
      reboot: true

  - name: add base Domain Admins to Administrators
    ansible.windows.win_group_membership:
      name: Administrators
      members:
      - LDAP\Domain Admins
      state: present

  - name: test out domain user logon
    ansible.windows.win_whoami:
    register: become_res
    failed_when: become_res.upn != domain_user_upn
    become: true
    become_method: runas
    vars:
      ansible_become_user: '{{ domain_user_upn }}'
      ansible_become_pass: '{{ domain_password }}'

# Use the following to get a snaphot of programs installed and their product_ids
# 'SOFTWARE', 'SOFTWARE\Wow6432Node' | ForEach-Object {
#       $getParams = @{
#           Path = "HKLM:\$_\Microsoft\Windows\CurrentVersion\Uninstall\*"
#           Name = 'DisplayName'
#           ErrorAction = 'SilentlyContinue'
#       }
#       Get-ItemProperty @getParams | Select-Object -Property @(
#           @{ N = 'Name'; E = { $_.DisplayName } },
#           @{ N = 'AppId'; E = { $_.PSChildName } }
#       )
#   } | Where-Object { $_.Name -like 'Python * Standard Library *' }

  - name: install Python interpreters
    ansible.windows.win_package:
      path: '{{ item.url }}'
      arguments: '{{ item.arguments }}'
      product_id: '{{ item.product_id }}'
      state: present
    with_items:
    - url: https://www.python.org/ftp/python/3.7.9/python-3.7.9.exe
      product_id: '{65048DA1-5996-4FF9-B20A-66EB2E68D0A4}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe
      product_id: '{FF740026-2FC0-4F8A-A046-8B316AF4ECA6}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.8.10/python-3.8.10.exe
      product_id: '{4196628C-AE5C-4304-B166-B7C1E93CDC25}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe
      product_id: '{080E0048-853C-49FB-96ED-30DEF7AB6E34}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.9.13/python-3.9.13.exe
      product_id: '{E23C472D-F346-4D47-A909-9D48E5D7252F}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe
      product_id: '{90A30DAB-6FD8-4CF8-BB8B-C0DB21C69F20}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.10.10/python-3.10.10.exe
      product_id: '{0438638B-4373-489E-BCE6-9C2D18119112}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.10.10/python-3.10.10-amd64.exe
      product_id: '{DCFC24EF-C987-4F08-A807-C562D5546446}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.11.2/python-3.11.2.exe
      product_id: '{BF492FDC-5681-4EE9-A631-1F11748D4E05}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0
    - url: https://www.python.org/ftp/python/3.11.2/python-3.11.2-amd64.exe
      product_id: '{6C19B2EE-FA34-4270-A87F-1FF008C1AC6E}'
      arguments: /quiet InstallAllUsers=1 Shortcuts=0

  - name: ensure virtualenv package is installed for each Python install
    ansible.windows.win_command:
      argv:
      - '{{ item }}\python.exe'
      - -m
      - pip
      - install
      - virtualenv
    args:
      creates: '{{ item }}\Scripts\virtualenv.exe'
    with_items: '{{ python_interpreters }}'

  - name: create virtualenv for each Python install
    ansible.windows.win_command:
      argv:
      - '{{ item }}\python.exe'
      - -m
      - virtualenv
      - C:\temp\venv\{{ item | win_basename }}
    args:
      creates: c:\temp\venv\{{ item | win_basename }}
    with_items: '{{ python_interpreters }}'

  - name: copy across user certificate
    ansible.windows.win_copy:
      src: '{{ playbook_dir }}/cert_setup/user-{{ domain_username }}.pfx'
      dest: C:\temp\user-cert.pfx

  - name: copy across wheel artifacts
    ansible.windows.win_copy:
      src: artifact.zip
      dest: C:\temp\wheels.zip

  - name: ensure wheel dir exists
    ansible.windows.win_file:
      path: C:\temp\wheels
      state: directory

  - name: extract wheel from archive
    community.windows.win_unzip:
      src: C:\temp\wheels.zip
      dest: C:\temp\wheels

  - name: get sansldap artifact sdist filename
    ansible.windows.win_find:
      paths: C:\temp\wheels
      patterns: 'sansldap-*.tar.gz'
      use_regex: false
    register: sansldap_sdist_file

  - name: verify sdist was found
    assert:
      that:
      - sansldap_sdist_file.files | count == 1

  - name: get sansldap artifact version
    set_fact:
      sansldap_version: >-
        {{ sansldap_sdist_file.files[0].filename | regex_replace('sansldap-(?P<version>.*)\.tar\.gz', '\g<version>') }}

  - name: install sansldap into virtualenv
    ansible.windows.win_command:
      argv:
      - c:\temp\venv\{{ item | win_basename }}\Scripts\python.exe
      - -m
      - pip
      - install
      - sansldap=={{ sansldap_version }}
      - pyspnego[kerberos]
      - pytest
      - pytest-asyncio
      - --find-links=C:/temp/wheels
    args:
      creates: c:\temp\venv\{{ item | win_basename }}\Lib\site-packages\sansldap
    with_items: '{{ python_interpreters }}'

- name: set up Linux host
  hosts: linux
  gather_facts: false
  become: true

  tasks:
  - name: install base packages
    ansible.builtin.apt:
      name:
      - gcc
      - make
      - python3
      - python3-dev
      - python3-venv
      - unzip
      - vim
      state: present

  - name: install kerberos packages
    ansible.builtin.apt:
      name: '{{ krb_packages }}'
      state: present

  - name: template krb5.conf file
    ansible.builtin.template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf

  - name: setup DNS settings for eth0 adapter
    ansible.builtin.copy:
      content: |
        [Match]
        Name=eth0

        [Network]
        DHCP=ipv4
      dest: /etc/systemd/network/eth0.network
    register: eth0_networkd

  - name: setup DNS settings for eth1 adapter
    ansible.builtin.copy:
      content: |
        [Match]
        Name=eth1

        [Network]
        Address={{ ansible_host }}/24
        Gateway=192.168.2.1
        DNS={{ hostvars["DC01"]["ansible_host"] }}
        Domains=~{{ domain_name }}
      dest: /etc/systemd/network/eth1.network
    register: eth1_networkd

  - name: ensure resolv.conf is pointing to systemd
    ansible.builtin.file:
      src: /run/systemd/resolve/stub-resolv.conf
      dest: /etc/resolv.conf
      state: link
      force: true
    register: resolv_conf_repoint

  - name: start and enable the systemd DNS services
    ansible.builtin.service:
      name: '{{ item }}'
      enabled: True
      state: restarted
    when: >-
      eth0_networkd is changed or
      eth1_networkd is changed or
      resolv_conf_repoint is changed
    loop:
    - systemd-resolved
    - systemd-networkd

  - name: create user keytab - MIT
    ansible.builtin.command: ktutil
    args:
      chdir: ~/
      creates: ~/user.keytab
      stdin: "addent -password -p {{ domain_user_upn }} -k 1 -e aes256-cts\n{{ domain_password }}\nwrite_kt user.keytab"
    become: false
    when: krb_provider == 'mit'

  - name: create user keytab - Heimdal
    ansible.builtin.command: >-
      ktutil
      --keytab=user.keytab
      add
      --principal={{ domain_user_upn }}
      --kvno=1
      --enctype=aes256-cts
      --password={{ domain_password }}
    args:
      chdir: ~/
      creates: ~/user.keytab
    become: false
    when: krb_provider == 'heimdal'

  - name: copy across CA cert
    ansible.builtin.copy:
      src: cert_setup/ca.pem
      dest: /usr/local/share/ca-certificates/sansldap.crt
    register: ca_cert_copy

  - name: register CA cert
    ansible.builtin.command: update-ca-certificates
    when: ca_cert_copy is changed

  - name: copy across user certificate
    ansible.builtin.copy:
      src: '{{ playbook_dir }}/cert_setup/user-{{ domain_username }}.pfx'
      dest: ~/user-cert.pfx
    become: false

  - name: ensure wheel dir exists
    ansible.builtin.file:
      path: ~/wheels
      state: directory
    become: false

  - name: extract wheel artifacts
    ansible.builtin.unarchive:
      src: artifact.zip
      dest: ~/wheels
    become: false

  - name: get sansldap artifact sdist filename
    ansible.builtin.find:
      paths: ~/wheels
      patterns: 'sansldap-*.tar.gz'
      recurse: false
      file_type: file
    become: false
    register: sansldap_sdist_file

  - name: verify sdist was found
    assert:
      that:
      - sansldap_sdist_file.files | count == 1

  - name: get sansldap artifact version
    set_fact:
      sansldap_version: >-
        {{ sansldap_sdist_file.files[0].path | basename | regex_replace('sansldap-(?P<version>.*)\.tar\.gz', '\g<version>') }}
  - name: create a virtualenv for each Python interpeter
    ansible.builtin.pip:
      name:
      - sansldap=={{ sansldap_version }}
      - pyspnego[kerberos]
      - pytest
      - pytest-asyncio
      virtualenv: ~/venv/sansldap
      virtualenv_command: /usr/bin/python3 -m venv
      extra_args: --find-links file:///{{ sansldap_sdist_file.files[0].path | dirname }}
    become: false
